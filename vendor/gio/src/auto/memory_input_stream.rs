// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio_sys;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use InputStream;
use PollableInputStream;
use Seekable;

glib_wrapper! {
    pub struct MemoryInputStream(Object<gio_sys::GMemoryInputStream, gio_sys::GMemoryInputStreamClass, MemoryInputStreamClass>) @extends InputStream, @implements PollableInputStream, Seekable;

    match fn {
        get_type => || gio_sys::g_memory_input_stream_get_type(),
    }
}

impl MemoryInputStream {
    pub fn new() -> MemoryInputStream {
        unsafe { InputStream::from_glib_full(gio_sys::g_memory_input_stream_new()).unsafe_cast() }
    }

    pub fn new_from_bytes(bytes: &glib::Bytes) -> MemoryInputStream {
        unsafe {
            InputStream::from_glib_full(gio_sys::g_memory_input_stream_new_from_bytes(
                bytes.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }
}

impl Default for MemoryInputStream {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MEMORY_INPUT_STREAM: Option<&MemoryInputStream> = None;

pub trait MemoryInputStreamExt: 'static {
    fn add_bytes(&self, bytes: &glib::Bytes);
}

impl<O: IsA<MemoryInputStream>> MemoryInputStreamExt for O {
    fn add_bytes(&self, bytes: &glib::Bytes) {
        unsafe {
            gio_sys::g_memory_input_stream_add_bytes(
                self.as_ref().to_glib_none().0,
                bytes.to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for MemoryInputStream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MemoryInputStream")
    }
}
