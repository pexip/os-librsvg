// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use InputStream;
use Seekable;
use ffi;
#[cfg(any(feature = "v2_34", feature = "dox"))]
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct MemoryInputStream(Object<ffi::GMemoryInputStream, ffi::GMemoryInputStreamClass>): InputStream, Seekable;

    match fn {
        get_type => || ffi::g_memory_input_stream_get_type(),
    }
}

impl MemoryInputStream {
    pub fn new() -> MemoryInputStream {
        unsafe {
            InputStream::from_glib_full(ffi::g_memory_input_stream_new()).downcast_unchecked()
        }
    }

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    pub fn new_from_bytes(bytes: &glib::Bytes) -> MemoryInputStream {
        unsafe {
            InputStream::from_glib_full(ffi::g_memory_input_stream_new_from_bytes(bytes.to_glib_none().0)).downcast_unchecked()
        }
    }
}

impl Default for MemoryInputStream {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MemoryInputStreamExt {
    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn add_bytes(&self, bytes: &glib::Bytes);
}

impl<O: IsA<MemoryInputStream>> MemoryInputStreamExt for O {
    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn add_bytes(&self, bytes: &glib::Bytes) {
        unsafe {
            ffi::g_memory_input_stream_add_bytes(self.to_glib_none().0, bytes.to_glib_none().0);
        }
    }
}
