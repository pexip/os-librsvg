// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Error;
use IOStream;
use TlsAuthenticationMode;
use TlsCertificate;
use TlsConnection;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct TlsServerConnection(Object<ffi::GTlsServerConnection, ffi::GTlsServerConnectionInterface>): TlsConnection, IOStream;

    match fn {
        get_type => || ffi::g_tls_server_connection_get_type(),
    }
}

impl TlsServerConnection {
    pub fn new<'a, P: IsA<IOStream>, Q: Into<Option<&'a TlsCertificate>>>(base_io_stream: &P, certificate: Q) -> Result<TlsServerConnection, Error> {
        let certificate = certificate.into();
        let certificate = certificate.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_tls_server_connection_new(base_io_stream.to_glib_none().0, certificate.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub trait TlsServerConnectionExt {
    fn get_property_authentication_mode(&self) -> TlsAuthenticationMode;

    fn set_property_authentication_mode(&self, authentication_mode: TlsAuthenticationMode);

    fn connect_property_authentication_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<TlsServerConnection> + IsA<glib::object::Object>> TlsServerConnectionExt for O {
    fn get_property_authentication_mode(&self) -> TlsAuthenticationMode {
        unsafe {
            let mut value = Value::from_type(<TlsAuthenticationMode as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "authentication-mode".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_authentication_mode(&self, authentication_mode: TlsAuthenticationMode) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "authentication-mode".to_glib_none().0, Value::from(&authentication_mode).to_glib_none().0);
        }
    }

    fn connect_property_authentication_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::authentication-mode",
                transmute(notify_authentication_mode_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_authentication_mode_trampoline<P>(this: *mut ffi::GTlsServerConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<TlsServerConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&TlsServerConnection::from_glib_borrow(this).downcast_unchecked())
}
